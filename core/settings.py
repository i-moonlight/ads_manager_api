"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from datetime import timedelta

import os, environ
from pathlib import Path

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='insecure-S#perS3crEt_007')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

try:
    # expects 1 or 0
    DEBUG = int(os.environ.get("DEBUG", default=0))
except:
    DEBUG = True

ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOSTS", default="*").split(" ")


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
	"rest_framework_tracking",
    "api",
    "api.user",
    "api.authentication",
    # 
    "api.contact",
	"api.ad_accounts",
	"api.ad_manager",
    "api.media_library",
    "api.google_ads",
	"api.linkedin",
    "api.meta",
	"api.pinterest",
	"api.snapchat",
	"api.tiktok",
    "storages",
    "channels",
    "django_q"
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE"  : env("DB_ENGINE"  , default="django.db.backends.sqlite3"),
        "NAME"    : env("DB_DATABASE", default=os.path.join(BASE_DIR, "db.sqlite3")),
        "USER"    : env("DB_USER"    , default=None),
        "PASSWORD": env("DB_PASSWORD", default=None),
        "HOST"    : env("DB_HOST"    , default=None),
        "PORT"    : env("DB_PORT"    , default=None),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user Model
AUTH_USER_MODEL = "api_user.User"

# ##################################################################### #
# ################### REST FRAMEWORK             ###################### #
# ##################################################################### #

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "api.authentication.backends.ActiveSessionAuthentication",
    ),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
}

# ##################################################################### #
#  CORS 
# ##################################################################### #

CORS_ALLOW_ALL_ORIGINS=True

# Load the default ones
CORS_ALLOWED_ORIGINS = ["http://localhost:3000", "http://127.0.0.1:3000"]

# Leaded from Environment
CORS_ALLOWED_ORIGINS_ENV = env("CORS_ALLOWED_ORIGINS", default=None)

if CORS_ALLOWED_ORIGINS_ENV:
    CORS_ALLOWED_ORIGINS += CORS_ALLOWED_ORIGINS_ENV.split(' ')


# ##################################################################### #
#  TESTING 
# ##################################################################### #

TESTING = False
TEST_RUNNER = "core.test_runner.CoreTestRunner"

FE_SERVER = env('FE_SERVER', default='http://localhost:3000')
API_SERVER = env('API_SERVER', default='http://localhost:8000')

FRONTEND_SITE_URL_LOGIN_BY_EMAIL_LINK =  os.getenv('FRONTEND_SITE_URL_LOGIN_BY_EMAIL_LINK') 

# GitHub social authentication
GITHUB_CLIENT_ID = env('GITHUB_CLIENT_ID', default=None)
GITHUB_SECRET_KEY = env('GITHUB_SECRET_KEY', default=None)

GOOGLE_CLIENT_ID = env('GOOGLE_CLIENT_ID', default=None)
GOOGLE_PROJECT_ID = env('GOOGLE_PROJECT_ID', default=None)
GOOGLE_CLIENT_SECRET = env('GOOGLE_CLIENT_SECRET', default=None)
GOOGLE_JAVASCRIPT_ORIGINS = env('GOOGLE_JAVASCRIPT_ORIGINS', default=None)
GOOGLE_DEVELOPER_TOKEN = env('GOOGLE_DEVELOPER_TOKEN', default=None)

LINKEDIN_OAUTH_CLIENT_ID = env('LINKEDIN_OAUTH_CLIENT_ID', default=None)
LINKEDIN_OAUTH_CLIENT_SECRET = env('LINKEDIN_OAUTH_CLIENT_SECRET', default=None)
LINKEDIN_API_VERSION = env('LINKEDIN_API_VERSION', default=None)

META_SYSTEM_USER_ACCESS_TOKEN = env('META_SYSTEM_USER_ACCESS_TOKEN', default=None)
META_APP_ID = env('META_APP_ID', default=None)
META_APP_SECRET = env('META_APP_SECRET', default=None)
META_APP_TOKEN = env('META_APP_TOKEN', default=None)
META_API_VERSION = env('META_API_VERSION', default=None)

PINTEREST_OAUTH_CLIENT_ID = env('PINTEREST_OAUTH_CLIENT_ID', default=None)
PINTEREST_OAUTH_CLIENT_SECRET = env('PINTEREST_OAUTH_CLIENT_SECRET', default=None)

SNAPCHAT_OAUTH_CLIENT_ID = env('SNAPCHAT_OAUTH_CLIENT_ID', default=None)
SNAPCHAT_OAUTH_CLIENT_SECRET = env('SNAPCHAT_OAUTH_CLIENT_SECRET', default=None)
SNAPCHAT_ADS_MANAGER_CLIENT_ID = env('SNAPCHAT_ADS_MANAGER_CLIENT_ID', default=None)
SNAPCHAT_ADS_MANAGER_CLIENT_SECRET = env('SNAPCHAT_ADS_MANAGER_CLIENT_SECRET', default=None)

TIKTOK_APP_ID = env('TIKTOK_APP_ID', default=None)
TIKTOK_APP_SECRET = env('TIKTOK_APP_SECRET', default=None)
TIKTOK_OAUTH_CLIENT_KEY = env('TIKTOK_OAUTH_CLIENT_KEY', default=None)
TIKTOK_APP_RID = env('TIKTOK_APP_RID', default=None)

SLACK_WEBHOOK_API_NOTI = env('SLACK_WEBHOOK_API_NOTI', default=None)

SECURE_EMAIL_TITLE = os.getenv('SECURE_EMAIL_TITLE')
EMAIL_FROM =  os.getenv('EMAIL_FROM')
EMAIL_HOST =  os.getenv('EMAIL_HOST')
EMAIL_USE_TLS =  os.getenv('EMAIL_USE_TLS')
EMAIL_PORT =  os.getenv('EMAIL_PORT')
EMAIL_HOST_USER =  os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD =  os.getenv('EMAIL_HOST_PASSWORD')
SEND_CONTACT_TO = os.getenv('SEND_CONTACT_TO', default='support@linkclicks.com')

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "sesame.backends.ModelBackend",
]

SESAME_MAX_AGE = timedelta(minutes=10)

# 
AWS_ACCESS_KEY_ID =  os.getenv("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY =  os.getenv("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME =  os.getenv("AWS_STORAGE_BUCKET_NAME", "")
AWS_STORAGE_REGION =  os.getenv("AWS_STORAGE_REGION", "")
AWS_S3_FILE_OVERWRITE = False

IS_AWS_S3 = (
	AWS_ACCESS_KEY_ID and
	AWS_SECRET_ACCESS_KEY and
	AWS_STORAGE_BUCKET_NAME and
	AWS_STORAGE_REGION
)
print("IS_AWS_S3:", IS_AWS_S3)
if IS_AWS_S3:    
	AWS_S3_FILE_OVERWRITE = False
	AWS_S3_REGION_NAME = "us-east-2"
	AWS_S3_SIGNATURE_VERSION = "s3v4"
	AWS_S3_CUSTOM_DOMAIN =  os.getenv("AWS_S3_CUSTOM_DOMAIN", "")
	AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
	AWS_DEFAULT_ACL =  os.getenv("AWS_DEFAULT_ACL", "public-read") #(optional; default is None which means the file will inherit the bucket’s permission)
	AWS_LOCATION = "" # store files under directory `media/` in bucket `my-app-bucket`, If not set (optional: default is ‘’)
	AWS_AUTO_CREATE_BUCKET = env.bool("AWS_AUTO_CREATE_BUCKET", True)
	DEFAULT_FILE_STORAGE =  os.getenv(
		"STATICFILES_STORAGE", "storages.backends.s3boto3.S3Boto3Storage"
	)

# 
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

ASGI_APPLICATION = "core.asgi.application"

CHANNEL_LAYERS = {
    "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"},
}

Q_CLUSTER = {
    'name': 'core',
    'workers': 4,
    'timeout': 600,
    'retry': 1800, # retry must be larger than timeout
    'queue_limit': 50,
    'bulk': 10,
    'orm': 'default',
    'db_sync': True,
}